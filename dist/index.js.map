{"version":3,"file":"index.js","sources":["../src/lib/debug-logger.ts","../src/lib/create-fake-cli.ts","../src/lib/create-cli.ts","../src/lib/get-release-promise.ts","../src/index.ts"],"sourcesContent":["import { inspect } from 'util'\n\n/*\n  Simple debug logger\n*/\nexport const debugLogger = (label: string, data: any) => {\n  if (data) {\n    console.log(\n      `[Sentry Vite Plugin] ${label} ${inspect(data, false, null, true)}`\n    )\n  }\n  else {\n    console.log(`[Sentry Vite Plugin] ${label}`)\n  }\n}\n","import type SentryCli from '@sentry/cli'\nimport type { SentryCliReleases } from '@sentry/cli'\n\nimport { debugLogger } from './debug-logger'\n\n/*\n  Fake sentry cli - it just prints info on actions\n*/\nexport const createFakeCli = (cli: SentryCli, debug = debugLogger) => {\n  const releases: SentryCliReleases = {\n    proposeVersion: () =>\n      cli.releases.proposeVersion().then((version) => {\n        debug('Proposed version:\\n', version)\n        return version\n      }),\n    new: (release) => {\n      debug('Creating new release:\\n', release)\n      return Promise.resolve(release)\n    },\n    uploadSourceMaps: (release, config) => {\n      debug('Calling upload-sourcemaps with:\\n', config)\n      return Promise.resolve(release)\n    },\n    finalize: (release) => {\n      debug('Finalizing release:\\n', release)\n      return Promise.resolve(release)\n    },\n    setCommits: (release, config) => {\n      debug('Calling set-commits with:\\n', config)\n      return Promise.resolve(release)\n    },\n    newDeploy: (release, config) => {\n      debug('Calling deploy with:\\n', config)\n      return Promise.resolve(release)\n    },\n    listDeploys: function (release: string): Promise<string> {\n      throw new Error('Function not implemented.')\n    },\n    execute: function (args: string[], live: boolean): Promise<string> {\n      throw new Error('Function not implemented.')\n    }\n  }\n\n  const DummySentryCli: SentryCli = {\n    releases,\n    execute: function (args: string[], live: boolean): Promise<string> {\n      throw new Error('Function not implemented.')\n    }\n  }\n\n  return DummySentryCli\n}\n","import type { ViteSentryCliOptions } from '../..'\n\nimport SentryCli from '@sentry/cli'\nimport { createFakeCli } from './create-fake-cli'\n\n/*\n  Initialize and return SentryCli instance\n  On dryRun enabled - returns fake sentryCli\n*/\n\nexport const createSentryCli = (options: ViteSentryCliOptions) => {\n  const sentryOptions = Object.assign({\n    silent: false\n  }, options)\n\n  /*\n    Initialize sentry cli\n  */\n  const cli = new SentryCli(options.configFile, {\n    authToken: sentryOptions.authToken,\n    org: sentryOptions.org,\n    project: sentryOptions.project,\n    silent: sentryOptions.silent,\n    url: sentryOptions.url,\n    vcsRemote: sentryOptions.vcsRemote\n  })\n\n  /*\n    Return fake sentry cli to run in dry mode\n  */\n  if (options.dryRun) {\n    return createFakeCli(cli)\n  }\n\n  return cli\n}\n","import type { ViteSentryCliReleaseOptions } from '../..'\n\nimport SentryCli from '@sentry/cli'\n\n/*\n  Prepare sentry release and returns promise\n*/\nexport const getReleasePromise = (\n  cli: SentryCli,\n  options: ViteSentryCliReleaseOptions = {}\n) => {\n  return (\n    options.release\n      ? Promise.resolve(options.release)\n      : cli.releases.proposeVersion()\n  )\n    .then((version: string) => `${version}`.trim())\n    .catch(() => undefined)\n}\n","import type { Plugin } from 'vite'\nimport type { ViteSentryPluginOptions } from '..'\n\nimport { createSentryCli } from './lib/create-cli'\nimport { getReleasePromise } from './lib/get-release-promise'\n\n/**\n * @deprecated Will be removed in one of next versions\n */\nconst DEPRECATED_MODULE_ID = 'virtual:vite-plugin-sentry/sentry-release'\nconst DEPRECATED_RESOLVED_ID = '\\0' + DEPRECATED_MODULE_ID\n\nconst MODULE_ID = 'virtual:vite-plugin-sentry/sentry-config'\nconst RESOLVED_ID = '\\0' + MODULE_ID\n\nexport default function ViteSentry (options: ViteSentryPluginOptions) {\n  const { skipEnvironmentCheck = false } = options\n\n  const cli = createSentryCli(options)\n  const currentReleasePromise = getReleasePromise(cli, options)\n\n  // plugin state\n  let pluginState = {\n    enabled: false,\n    sourcemapsCreated: false,\n    isProduction: false\n  }\n\n  const viteSentryPlugin: Plugin = {\n    name: 'sentry',\n    enforce: 'post',\n    apply (config, { command }) {\n      // disable plugin in SSR mode\n      // TODO: maybe there is better solution to upload generated SSR artifacts too\n      if (config.build?.ssr) {\n        return false\n      }\n\n      return true\n    },\n\n    /*\n      define SENTRY_RELEASE to `import.meta.env.SENTRY_RELEASE`\n    */\n    async config () {\n      const currentRelease = await currentReleasePromise\n\n      return {\n        define: {\n\n          /**\n           * @deprecated use VITE_PLUGIN_SENTRY_CONFIG instead\n           */\n          'import.meta.env.SENTRY_RELEASE': JSON.stringify({\n            id: currentRelease\n          }),\n          'import.meta.env.VITE_PLUGIN_SENTRY_CONFIG': JSON.stringify({\n            dist: options.sourceMaps.dist,\n            release: currentRelease\n          })\n        }\n      }\n    },\n\n    /*\n      Check incoming config and decise - enable plugin or not\n      We don't want enable plugin for non-production environments\n      also we dont't want to enable with disabled sourcemaps\n    */\n    configResolved (config) {\n      pluginState.sourcemapsCreated = !!config.build.sourcemap\n      pluginState.isProduction = config.isProduction\n      pluginState.enabled =\n        pluginState.sourcemapsCreated &&\n        (skipEnvironmentCheck || config.isProduction)\n    },\n\n    /*\n      Resolve id for virtual module\n    */\n    resolveId (id) {\n      if (id === DEPRECATED_MODULE_ID) {\n        this.warn(\n          '\\n\\nDEPRECATION NOTICE:\\n\\nSeems that you are using sentry-release virtual module.\\n' +\n            \"It's deprecated now and will be removed in next versions, please use virtual:vite-plugin-sentry/sentry-config instead\" +\n            'New virtual module provide { dist, release } instead of just release string\\n' +\n            'So instead of import.meta.env.SENTRY_RELEASE.id, you can use import.meta.env.VITE_PLUGIN_SENTRY_CONFIG.release'\n        )\n        return DEPRECATED_RESOLVED_ID\n      }\n      if (id === MODULE_ID) {\n        return RESOLVED_ID\n      }\n    },\n\n    /*\n      Provide virtual module\n    */\n    load (id) {\n\n      /**\n       * @deprecated Will be removed on one of next releases\n       */\n      if (id === DEPRECATED_RESOLVED_ID) {\n        return 'globalThis.SENTRY_RELEASE = import.meta.env.SENTRY_RELEASE\\n'\n      }\n      if (id === RESOLVED_ID) {\n        return 'globalThis.VITE_PLUGIN_SENTRY_CONFIG = import.meta.env.VITE_PLUGIN_SENTRY_CONFIG\\n'\n      }\n    },\n\n    /*\n      We starting plugin here, because at the moment vite completed with building\n      so sourcemaps must be ready\n    */\n    async closeBundle () {\n      const { enabled, sourcemapsCreated, isProduction } = pluginState\n\n      if (!enabled) {\n        if (!isProduction) {\n          this.warn(\n            'Skipped because running non-production build. If you want to run it anyway set skipEnvironmentCheck option value to true'\n          )\n        }\n        else if (!sourcemapsCreated) {\n          this.warn(\n            'Skipped because vite is not configured to provide sourcemaps. Please check configuration setting [options.sourcemap]!'\n          )\n        }\n      }\n      else {\n        if (!isProduction && skipEnvironmentCheck) {\n          this.warn('Running in non-production mode!')\n        }\n\n        const currentRelease = await currentReleasePromise\n\n        if (!currentRelease) {\n          this.warn(\n            'Release returned from sentry is empty! Please check your config'\n          )\n        }\n        else {\n          try {\n            // create release\n            await cli.releases.new(currentRelease)\n\n            if (options.cleanArtifacts) {\n              await cli.releases.execute(\n                [ 'releases', 'files', currentRelease, 'delete', '--all' ],\n                true\n              )\n            }\n\n            // upload source maps\n            await cli.releases.uploadSourceMaps(\n              currentRelease,\n              options.sourceMaps\n            )\n\n            // set commits\n            if (options.setCommits) {\n              const { commit, repo, auto } = options.setCommits\n\n              if (auto || (repo && commit)) {\n                await cli.releases.setCommits(\n                  currentRelease,\n                  options.setCommits\n                )\n              }\n            }\n\n            // finalize release\n            if (options.finalize) {\n              await cli.releases.finalize(currentRelease)\n            }\n\n            // set deploy options\n            if (options.deploy && options.deploy.env) {\n              await cli.releases.newDeploy(currentRelease, options.deploy)\n            }\n          }\n          catch (error) {\n            this.warn(\n              `Error while uploading sourcemaps to Sentry: ${error.message}`\n            )\n          }\n        }\n      }\n    }\n  }\n\n  return viteSentryPlugin\n}\n"],"names":["inspect","SentryCli"],"mappings":"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"}